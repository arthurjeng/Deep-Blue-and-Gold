// Myopic: A simple chess program for small systems
//
// Copyright (C) 2010 by chessnotation@me.com   (Some rights reserved)
//
// License: Creative Commons Attribution-Share Alike 3.0
// See: http://creativecommons.org/licenses/by-sa/3.0/
//
// Caution: No warranty; use at your own risk.

#include "Definitions.h"
#include "Constants.h"
#include "Utilities.h"

#if (IsDevHost)
#include <cassert>
#endif

#include "Counter.h"
#include "Board.h"
#include "FEnv.h"
#include "FPos.h"
#include "Move.h"
#include "UnDo.h"
#include "UnDoStack.h"
#include "ML.h"
#include "Hash.h"
#include "History.h"
#include "TBV.h"
#include "MGS.h"
#include "PEnv.h"
#include "Pos.h"
#include "PVTable.h"
#include "PIR.h"
#include "Search.h"
#include "State.h"

void State::OneTimeSetup(void)
{
  // Perform a one-time setup of the State single-instance object

  isdone = false; interrupt = false; loopcount = 0; options = 0;
  SetDefaultLimits(); movelist.Preset(movestack, MoveStackLen); ResetStacks();
  search.OneTimeSetup(movelist, history, undostack); search.RedrawBoardDisplay();
}

void State::Interrupt(void)
{
  // Process an interrupt generated by the user

  interrupt = true; search.Interrupt();
}

void State::SetDefaultLimits(void)
{
  // Set the search limits to their default values

  limitmsec = DefaultST * 1000ul; limitply = DefaultSD;
}

void State::NewGame(void)
{
  // Setup for a new game

  ResetStacks(); search.SetInitialArray(); search.RedrawBoardDisplay();
}

void State::Play(const Move& move)
{
  // Play a move

  const Move playmove = move; // Local copy for safety

  search.Play(playmove); search.RedrawBoardDisplay();
}

void State::Unplay(void)
{
  // Unplay a move

  search.Unplay(); search.RedrawBoardDisplay();
}

void State::Flip(void)
{
  // Flip the colors of the search state

  ResetStacks(); search.Flip(); search.RedrawBoardDisplay();
}

void State::LoadStateFromFPos(const FPos& fpos)
{
  // Load a new position into the search state

  ResetStacks(); search.LoadSearchFromFPos(fpos); search.RedrawBoardDisplay();
}
